name: üöÄ Deploy to Hostinger (No Migrate)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests before deploy'
        required: false
        default: false
        type: boolean

env:
  HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}
  HOSTINGER_USERNAME: ${{ secrets.HOSTINGER_USERNAME }}
  HOSTINGER_PASSWORD: ${{ secrets.HOSTINGER_PASSWORD }}
  DEPLOY_PATH: ${{ secrets.HOSTINGER_DEPLOY_PATH }}

jobs:
  deploy-hostinger:
    name: üöÄ Deploy to Hostinger
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          tools: composer:v2

      - name: Install Composer dependencies
        run: |
          echo "üì¶ Installing PHP dependencies..."
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          echo "‚úÖ Composer dependencies installed"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install NPM dependencies and build assets
        run: |
          echo "üì¶ Installing NPM dependencies..."
          npm ci
          echo "üèóÔ∏è Building production assets..."
          npm run build
          echo "‚úÖ Assets built successfully"

      - name: Validate deployment secrets
        run: |
          echo "üîê Validating deployment secrets..."
          
          # Check if HOSTINGER_HOST is set and not empty
          if [ -z "${HOSTINGER_HOST}" ]; then
            echo "‚ùå ERROR: HOSTINGER_HOST secret is missing or empty!"
            echo "Please set the HOSTINGER_HOST secret in your repository settings."
            echo "Go to: Settings > Secrets and variables > Actions"
            exit 1
          fi
          
          # Check if HOSTINGER_USERNAME is set and not empty
          if [ -z "${HOSTINGER_USERNAME}" ]; then
            echo "‚ùå ERROR: HOSTINGER_USERNAME secret is missing or empty!"
            echo "Please set the HOSTINGER_USERNAME secret in your repository settings."
            exit 1
          fi
          
          # Check if HOSTINGER_PASSWORD is set and not empty
          if [ -z "${HOSTINGER_PASSWORD}" ]; then
            echo "‚ùå ERROR: HOSTINGER_PASSWORD secret is missing or empty!"
            echo "Please set the HOSTINGER_PASSWORD secret in your repository settings."
            exit 1
          fi
          
          # Check if DEPLOY_PATH is set and not empty
          if [ -z "${DEPLOY_PATH}" ]; then
            echo "‚ùå ERROR: HOSTINGER_DEPLOY_PATH secret is missing or empty!"
            echo "Please set the HOSTINGER_DEPLOY_PATH secret in your repository settings."
            exit 1
          fi
          
          echo "‚úÖ All required deployment secrets are configured"

      - name: Debug deployment configuration
        run: |
          echo "üîç Deployment configuration debug info:"
          echo "Host: ${HOSTINGER_HOST:0:3}***${HOSTINGER_HOST: -3}"
          echo "Username: ${HOSTINGER_USERNAME:0:2}***${HOSTINGER_USERNAME: -2}"
          echo "Deploy path: ${DEPLOY_PATH}"
          echo "Password: [MASKED]"

      - name: Run tests (if not skipped)
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "üß™ Running tests before deployment..."
          # Create testing database
          touch database/database.sqlite
          php artisan migrate --database=sqlite --force
          
          # Run tests
          if php artisan test --stop-on-failure; then
            echo "‚úÖ All tests passed!"
          else
            echo "‚ùå Tests failed - deployment will continue anyway"
            echo "‚ö†Ô∏è Please check tests after deployment"
          fi
        continue-on-error: true

      - name: Prepare deployment package
        run: |
          echo "üì¶ Preparing deployment package..."
          
          # Remove development files
          rm -rf tests/
          rm -rf node_modules/
          rm -rf .git/
          rm -f .env.example
          rm -f *.md
          rm -f phpunit.xml
          rm -f vite.config.js
          rm -f package*.json
          
          # Create deployment info
          echo "Deployed at: $(date)" > deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-info.txt
          
          echo "‚úÖ Deployment package prepared"

      - name: Install sshpass
        run: |
          echo "üîß Installing sshpass..."
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Deploy to Hostinger via RSYNC
        run: |
          echo "üöÄ Deploying to Hostinger..."
          echo "Connecting to: ${HOSTINGER_USERNAME}@${HOSTINGER_HOST}"
          echo "Deploy path: ${DEPLOY_PATH}"
          
          # Double-check that required variables are not empty
          if [ -z "${HOSTINGER_HOST}" ] || [ -z "${HOSTINGER_USERNAME}" ] || [ -z "${HOSTINGER_PASSWORD}" ] || [ -z "${DEPLOY_PATH}" ]; then
            echo "‚ùå ERROR: One or more required deployment variables are empty!"
            echo "HOSTINGER_HOST: ${HOSTINGER_HOST:-[EMPTY]}"
            echo "HOSTINGER_USERNAME: ${HOSTINGER_USERNAME:-[EMPTY]}"
            echo "DEPLOY_PATH: ${DEPLOY_PATH:-[EMPTY]}"
            exit 1
          fi
          
          # Create .ssh directory and configure
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Deploy files using rsync with sshpass
          echo "Starting rsync deployment..."
          if sshpass -p "${HOSTINGER_PASSWORD}" rsync -avz \
            --delete \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='bootstrap/cache/*' \
            --exclude='.env' \
            ./ "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}:${DEPLOY_PATH}/"; then
            echo "‚úÖ Files deployed successfully"
          else
            echo "‚ùå ERROR: RSYNC deployment failed!"
            echo "Please check:"
            echo "1. HOSTINGER_HOST is correct and reachable"
            echo "2. HOSTINGER_USERNAME has proper permissions"
            echo "3. HOSTINGER_PASSWORD is correct"
            echo "4. DEPLOY_PATH exists and is writable"
            exit 1
          fi

      - name: Post-deployment setup (No Migration)
        run: |
          echo "‚öôÔ∏è Running post-deployment setup..."
          
          # Run Artisan commands on server (NO MIGRATION)
          echo "Running config:cache..."
          if sshpass -p "${HOSTINGER_PASSWORD}" ssh -o StrictHostKeyChecking=no \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan config:cache"; then
            echo "‚úÖ Config cache cleared successfully"
          else
            echo "‚ö†Ô∏è Warning: Config cache command failed"
          fi
          
          echo "Running route:cache..."
          if sshpass -p "${HOSTINGER_PASSWORD}" ssh -o StrictHostKeyChecking=no \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan route:cache"; then
            echo "‚úÖ Route cache cleared successfully"
          else
            echo "‚ö†Ô∏è Warning: Route cache command failed"
          fi
          
          echo "Running view:cache..."
          if sshpass -p "${HOSTINGER_PASSWORD}" ssh -o StrictHostKeyChecking=no \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan view:cache"; then
            echo "‚úÖ View cache cleared successfully"
          else
            echo "‚ö†Ô∏è Warning: View cache command failed"
          fi
          
          echo "Creating storage link..."
          if sshpass -p "${HOSTINGER_PASSWORD}" ssh -o StrictHostKeyChecking=no \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && php artisan storage:link"; then
            echo "‚úÖ Storage link created successfully"
          else
            echo "‚ö†Ô∏è Warning: Storage link command failed (may already exist)"
          fi
          
          echo "‚úÖ Post-deployment setup completed (NO MIGRATION)"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Check if files exist on server
          echo "Checking deployment files and Laravel version..."
          if sshpass -p "${HOSTINGER_PASSWORD}" ssh -o StrictHostKeyChecking=no \
            "${HOSTINGER_USERNAME}@${HOSTINGER_HOST}" \
            "cd ${DEPLOY_PATH} && ls -la && php artisan --version"; then
            echo "‚úÖ Deployment verification completed successfully"
          else
            echo "‚ùå ERROR: Deployment verification failed!"
            echo "The deployment may have issues. Please check manually."
            exit 1
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "üéâ Hostinger Deployment Summary"
          echo "==============================="
          echo "‚úÖ Repository: ${{ github.repository }}"
          echo "‚úÖ Branch: ${{ github.ref_name }}"
          echo "‚úÖ Commit: ${{ github.sha }}"
          echo "‚úÖ Deploy Path: ${DEPLOY_PATH}"
          echo "‚ö†Ô∏è  Migration: SKIPPED (run manually via sshpass)"
          echo "‚ö†Ô∏è  Environment: Please verify .env file manually"
          echo ""
          echo "üîß To run migrations manually:"
          echo "sshpass -p 'password' ssh user@host 'cd path && php artisan migrate'"
          echo ""
          echo "üöÄ Deployment completed successfully!"

  # ============================================================================
  # NOTIFY MIGRATION NEEDED
  # ============================================================================
  migration-reminder:
    name: üì¢ Migration Reminder
    runs-on: ubuntu-latest
    needs: deploy-hostinger
    if: always()
    
    steps:
      - name: Migration reminder
        run: |
          echo "‚ö†Ô∏è  MIGRATION REMINDER"
          echo "====================="
          echo ""
          echo "üóÑÔ∏è  Database migrations were NOT run automatically."
          echo "üîß To run migrations manually, use:"
          echo ""
          echo "sshpass -p '\${{ secrets.HOSTINGER_PASSWORD }}' ssh \\"
          echo "  '\${{ secrets.HOSTINGER_USERNAME }}@\${{ secrets.HOSTINGER_HOST }}' \\"
          echo "  'cd \${{ secrets.HOSTINGER_DEPLOY_PATH }} && php artisan migrate --force'"
          echo ""
          echo "üìù Or create a separate migration workflow if needed."
          echo ""
          echo "‚úÖ Code deployment completed successfully!"